{"version":3,"sources":["Components/Assets/allTheSourdough.jpg","Components/Assets/facebookRound.png","logo.svg","Components/ComingSoon.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ComingSoon","className","id","src","AllTheSourdough","alt","href","target","Facebook","name","acceptCharset","action","method","type","placeholder","required","rows","value","footerStyle","backgroundColor","borderTop","textAlign","padding","left","bottom","height","width","phantom","display","Footer","style","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,uECA3CD,EAAOC,QAAU,IAA0B,kC,yKCsC1BC,MAhCjB,WACI,OACE,yBAAKC,UAAU,MACb,wBAAIC,GAAG,WAAP,sCACI,yBAAKD,UAAU,UACX,yBAAKE,IAAKC,IAAiBF,GAAG,kBAAkBG,IAAI,mDAEpD,uBAAGC,KAAK,6CAA6CC,OAAO,MACxD,yBAAKJ,IAAKK,IAAUN,GAAG,UACnB,wBAAIA,GAAG,cAAP,kFAEZ,wBAAIA,GAAG,iBAAP,0CACE,0BAAMD,UAAU,SAASQ,KAAK,sBAAsBC,cAAc,QAAQC,OAAO,4CAA4CC,OAAO,QACpI,yBAAKX,UAAU,gBACZ,8BAAUC,GAAG,iBAEV,2BAAOW,KAAK,OAAOJ,KAAK,OAAOP,GAAG,YAAYY,YAAY,sBAAsBb,UAAU,cAAcc,SAAS,KAEjH,2BAAOF,KAAK,QAAQJ,KAAK,WAAWP,GAAG,gBAAgBY,YAAY,gBAAgBb,UAAU,cAAec,SAAS,KAErH,8BAAUC,KAAK,IAAIP,KAAK,UAAUP,GAAG,UAAUY,YAAY,kEAAkEb,UAAU,cAAec,SAAS,KAC/J,2BAAOF,KAAK,SAASJ,KAAK,WAAWP,GAAG,gBAAgBe,MAAM,8BAGlE,yBAAKhB,UAAU,oBACf,2BAAOY,KAAK,SAASI,MAAM,SAASV,OAAO,KAAKL,GAAG,qBC5B/DgB,EAAc,CACdC,gBAAiB,UACjBC,UAAW,oBACXC,UAAW,SACXC,QAAS,OACTC,KAAM,IACNC,OAAQ,IACRC,OAAQ,OACRC,MAAO,QAGPC,EAAU,CACZC,QAAS,QACTN,QAAS,OACTG,OAAQ,OACRC,MAAO,QAaMG,MAVf,WACE,OACE,6BACI,yBAAKC,MAAOH,IACZ,yBAAKG,MAAOZ,GACR,gECXGa,MATf,WACE,OACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEc+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.27add5e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/allTheSourdough.ab53faae.jpg\";","module.exports = __webpack_public_path__ + \"static/media/facebookRound.57a3e72e.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { fieldset } from 'reactstrap';\r\nimport AllTheSourdough from './Assets/allTheSourdough.jpg';\r\nimport '../Components/CSS/comingSoon.css';\r\nimport Facebook from './Assets/facebookRound.png'\r\n\r\nfunction ComingSoon() {\r\n    return (\r\n      <div className=\"CS\">\r\n        <h1 id=\"titleCS\" >Frank's Bread Academy Coming Soon!</h1>\r\n            <div className=\"atsDiv\">\r\n                <img src={AllTheSourdough} id=\"allTheSourdough\" alt=\"Frank posed with 11 loaves of sourdough bread\"/>\r\n            </div>\r\n                <a href=\"https://www.facebook.com/Frankthebreadguy/\" target=\"_#\">\r\n                    <img src={Facebook} id=\"fbImg\"/>\r\n                        <h3 id=\"followMeFb\">Check out my Facebook page to see what I'm baking and information on classes.</h3>\r\n                </a>\r\n            <h3 id=\"sendMessageH3\">Please feel free to send me a message.</h3>\r\n              <form className=\"fs-frm\" name=\"simple-contact-form\" acceptCharset=\"utf-8\" action=\"https://formspree.io/indybreadguy@att.net\" method=\"post\">\r\n              <div className=\"formspreeDiv\"> \r\n                 <fieldset id=\"fs-frm-inputs\">\r\n                    {/* <label for=\"full-name\">Full Name</label> */}\r\n                    <input type=\"text\" name=\"name\" id=\"full-name\" placeholder=\"First and Last Name\" className=\"inputFields\" required=\"\"/>\r\n                    {/* <label for=\"email-address\">Email Address</label> */}\r\n                    <input type=\"email\" name=\"_replyto\" id=\"email-address\" placeholder=\"Email Address\" className=\"inputFields\"  required=\"\"/>\r\n                    {/* <label for=\"message\">Message</label> */}\r\n                    <textarea rows=\"5\" name=\"message\" id=\"message\" placeholder=\"Thank you for your message. I look forward to hearing from you.\" className=\"inputFields\"  required=\"\"></textarea>\r\n                    <input type=\"hidden\" name=\"_subject\" id=\"email-subject\" value=\"Contact Form Submission\"/>\r\n                </fieldset>\r\n                </div>\r\n                <div className=\"submitMessageDiv\">\r\n                <input type=\"submit\" value=\"Submit\" target=\"_#\" id=\"submitButton\"></input>\r\n                </div>\r\n              </form>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default ComingSoon;","import React from 'react';\r\n\r\n\r\nvar footerStyle = {\r\n    backgroundColor: \"#22545c\",\r\n    borderTop: \"1px solid #474545\",\r\n    textAlign: \"center\",\r\n    padding: \"20px\",\r\n    left: \"0\",\r\n    bottom: \"0\",\r\n    height: \"60px\",\r\n    width: \"100%\",\r\n}\r\n\r\nvar phantom = {\r\n  display: 'block',\r\n  padding: '20px',\r\n  height: '60px',\r\n  width: '100%',\r\n}\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div>\r\n        <div style={phantom} />\r\n        <div style={footerStyle}>\r\n            <p>2020Â© Frank's Bread Academy</p>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Footer;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ComingSoon from './Components/ComingSoon';\nimport Footer from './Components/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ComingSoon/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}